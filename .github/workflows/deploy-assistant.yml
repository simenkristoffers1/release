name: Deploy Assistant

on:
  workflow_dispatch:
    inputs:
      infrastructure-changed:
        description: "Infrastructure changed"
        required: true
        type: boolean
      migrations-changed:
        description: "Migrations changed"
        required: true
        type: boolean
      assistant-changed:
        description: "Assistant changed"
        required: true
        type: boolean
      knowledge-changed:
        description: "Knowledge changed"
        required: true
        type: boolean

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      infrastructure-changed: ${{ inputs.infrastructure-changed }}
      migrations-changed: ${{ inputs.migrations-changed }}
      assistant-changed: ${{ inputs.assistant-changed }}
      knowledge-changed: ${{ inputs.knowledge-changed }}
      any_service_changed: ${{ inputs.assistant-changed || inputs.knowledge-changed }}
    steps:
      - run: |
          echo "Detecting changes..."
          echo "Infrastructure changed: ${{ inputs.infrastructure-changed }}"
          echo "Migrations changed: ${{ inputs.migrations-changed }}"
          echo "Assistant changed: ${{ inputs.assistant-changed }}"
          echo "Knowledge changed: ${{ inputs.knowledge-changed }}"

  provision-infrastructure-staging:
    needs: detect-changes
    uses: ./.github/workflows/reusable-deploy-infrastructure.yml
    with:
      environment: staging
    secrets: inherit
    if: |
      (always() && needs.detect-changes.outputs.infrastructure-changed == 'true')

  apply-migrations-staging:
    uses: ./.github/workflows/reusable-migrate-database.yml
    needs: [detect-changes, provision-infrastructure-staging]
    with:
      environment: staging
    secrets: inherit
    if: |
      (always() && needs.detect-changes.outputs.migrations-changed == 'true' &&
      (needs.provision-infrastructure-staging.result != 'success' || needs.provision-infrastructure-staging.result == 'skipped'))

  prepare-build-matrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          matrix="[]"
          if [[ "${{ needs.detect-changes.outputs.assistant-changed }}" == "true" ]]; then
            matrix=$(echo "$matrix" | jq -c '. += [{
              "component":"assistant",
              "resource-group":"aiasst-staging",
              "container-app-name":"aiasst-api",
              "image-name":"aiasst-api",
              "context":"./assistant",
              "file":"./assistant/Dockerfile"
            }]')
            matrix=$(echo "$matrix" | jq -c '. += [{
              "component":"cleanup-job",
              "resource-group":"aiasst-staging",
              "container-app-name":"aiasst-cleanup-job",
              "image-name":"aiasst-cleanup-job",
              "context":"./assistant",
              "file":"./assistant/Dockerfile.ConversationCleanupJob"
            }]')
          fi
          if [[ "${{ needs.detect-changes.outputs.knowledge-changed }}" == "true" ]]; then
            matrix=$(echo "$matrix" | jq -c '. += [{
              "component":"knowledge",
              "resource-group":"aiasst-staging",
              "container-app-name":"aiasst-knowledge",
              "image-name":"aiasst-knowledge",
              "context":"./knowledge-search",
              "file":"./knowledge-search/Dockerfile"
            }]')
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-images:
    needs: [detect-changes, prepare-build-matrix]
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare-build-matrix.outputs.matrix) }}
    secrets: inherit
    uses: ./.github/workflows/reusable-build-docker.yml
    with:
      image-name: ${{ matrix.image-name }}
      context: ${{ matrix.context }}
      file: ${{ matrix.file }}
      image-tag: staging
    if: always() && ${{ needs.detect-changes.outputs.any_service_changed == 'true' }}

  deploy-assistant-ca-staging:
    uses: ./.github/workflows/publish-container-app.yml
    needs: [build-images]
    with:
      environment: staging
      resource-group: aiasst-staging
      container-app-name: aiasst-api
      image-name: aiasst-knowledge:${{ github.sha }}
    secrets: inherit
    if: always() && needs.build-images.result == 'success'

  deploy-knowledge-ca-staging:
    uses: ./.github/workflows/publish-container-app.yml
    needs: [build-images]
    with:
      environment: staging
      resource-group: aiasst-staging
      container-app-name: aiasst-knowledge
      image-name: aiasst-knowledge:${{ github.sha }}
    secrets: inherit
    if: always() && needs.build-images.result == 'success'

  wait-for-production-approval:
    runs-on: ubuntu-latest
    environment: production-approval
    needs: [deploy-assistant-ca-staging, deploy-knowledge-ca-staging]
    if: |
      always() &&
      (needs.deploy-assistant-ca-staging.result == 'success' || needs.deploy-assistant-ca-staging.result == 'skipped') &&
      (needs.deploy-knowledge-ca-staging.result == 'success' || needs.deploy-knowledge-ca-staging.result == 'skipped')
    steps:
      - run: |
          echo "Waiting for production approval..."

  provision-infrastructure-production:
    needs: [detect-changes, wait-for-production-approval]
    uses: ./.github/workflows/reusable-deploy-infrastructure.yml
    with:
      environment: production
    secrets: inherit
    if: |
      (always() && needs.detect-changes.outputs.infrastructure-changed == 'true')

  apply-migrations-production:
    needs: [detect-changes, provision-infrastructure-production]
    uses: ./.github/workflows/reusable-migrate-database.yml
    with:
      environment: production
    secrets: inherit
    if: |
      (always() && needs.detect-changes.outputs.migrations-changed == 'true' &&
      (needs.provision-infrastructure-production.result == 'success' || needs.provision-infrastructure-production.result == 'skipped'))

  promote-images:
    needs: [prepare-build-matrix, build-images, apply-migrations-production]
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare-build-matrix.outputs.matrix) }}
    uses: ./.github/workflows/reusable-promote-docker.yml
    with:
      image-name: ${{ matrix.image-name }}
      image-tag: staging
      promote-to: production
    if: |
      (always() &&
      (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))

  deploy-assistant-ca-production:
    uses: ./.github/workflows/publish-container-app.yml
    needs: [promote-images]
    with:
      environment: staging
      resource-group: aiasst-staging
      container-app-name: aiasst-api
      image-name: aiasst-knowledge:${{ github.sha }}
    secrets: inherit
    if: always() && needs.promote-images.result == 'success'

  deploy-knowledge-ca-production:
    uses: ./.github/workflows/publish-container-app.yml
    needs: [promote-images]
    with:
      environment: staging
      resource-group: aiasst-staging
      container-app-name: aiasst-knowledge
      image-name: aiasst-knowledge:${{ github.sha }}
    secrets: inherit
    if: always() && needs.promote-images.result == 'success'
