name: Deploy Assistant

on:
  workflow_dispatch:
    inputs:
      infrastructure-changed:
        description: "Infrastructure changed"
        required: true
        type: boolean
      migrations-changed:
        description: "Migrations changed"
        required: true
        type: boolean
      assistant-changed:
        description: "Assistant changed"
        required: true
        type: boolean
      knowledge-changed:
        description: "Knowledge changed"
        required: true
        type: boolean

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      infrastructure-changed: ${{ inputs.infrastructure-changed }}
      migrations-changed: ${{ inputs.migrations-changed }}
      assistant-changed: ${{ inputs.assistant-changed }}
      knowledge-changed: ${{ inputs.knowledge-changed }}
      any_service_changed: ${{ inputs.assistant-changed || inputs.knowledge-changed }}
    steps:
      - run: |
          echo "Detecting changes..."
          echo "Infrastructure changed: ${{ inputs.infrastructure-changed }}"
          echo "Migrations changed: ${{ inputs.migrations-changed }}"
          echo "Assistant changed: ${{ inputs.assistant-changed }}"
          echo "Knowledge changed: ${{ inputs.knowledge-changed }}"

  provision-infrastructure-staging:
    needs: detect-changes
    uses: ./.github/workflows/reusable-deploy-infrastructure.yml
    with:
      environment: staging
    secrets: inherit
    if: |
      (always() && needs.detect-changes.outputs.infrastructure-changed == 'true')

  apply-migrations-staging:
    uses: ./.github/workflows/reusable-migrate-database.yml
    needs: [detect-changes, provision-infrastructure-staging]
    with:
      environment: staging
    secrets: inherit
    if: |
      (always() && needs.detect-changes.outputs.migrations-changed == 'true' &&
      (needs.provision-infrastructure-staging.result != 'success' || needs.provision-infrastructure-staging.result == 'skipped'))

  prepare-build-matrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        name: Prepare Build Matrix
        run: |
          matrix="[]"
          if [[ "${{ needs.detect-changes.outputs.assistant-changed }}" == "true" ]]; then
            matrix=$(echo "$matrix" | jq -c '. += ["assistant"]')
            matrix=$(echo "$matrix" | jq -c '. += ["cleanup-job"]')
          fi
          if [[ "${{ needs.detect-changes.outputs.knowledge-changed }}" == "true" ]]; then
            matrix=$(echo "$matrix" | jq -c '. += ["knowledge"]')
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: [detect-changes, prepare-build-matrix]
    if: needs.detect-changes.outputs.any_service_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        # Define services here to easily add/remove them later.
        component: ${{ fromJson(needs.prepare-build-matrix.outputs.matrix) }}
        include:
          - component: assistant
            image-name: aiasst-api
            context: ./assistant
            file: ./assistant/Dockerfile
          - component: cleanup-job
            image-name: aiasst-cleanup-job
            context: ./assistant
            file: ./assistant/Dockerfile.ConversationCleanupJob
          - component: knowledge
            image-name: aiasst-knowledge
            context: ./knowledge-search
            file: ./knowledge-search/Dockerfile
    uses: ./.github/workflows/reusable-build-docker.yml
    with:
      image-name: ${{ matrix.image-name }}
      context: ${{ matrix.context }}
      file: ${{ matrix.file }}
      image-tag: staging
      set-latest-tag: true

  # build-assistant-image:
  #   uses: ./.github/workflows/reusable-build-docker.yml
  #   needs: [detect-changes, apply-migrations-staging]
  #   with:
  #     image-name: aiasst-api
  #     context: ./assistant
  #     file: ./assistant/Dockerfile
  #   if: |
  #     (always() && needs.detect-changes.outputs.assistant-changed == 'true' &&
  #     (needs.apply-migrations-staging.result == 'success' || needs.apply-migrations-staging.result == 'skipped'))

  # build-cleanup-job-image:
  #   uses: ./.github/workflows/reusable-build-docker.yml
  #   needs: [detect-changes, apply-migrations-staging]
  #   with:
  #     image-name: aiasst-cleanup-job
  #     context: ./assistant
  #     file: ./assistant/Dockerfile.ConversationCleanupJob
  #   if: |
  #     (always() && needs.detect-changes.outputs.assistant-changed == 'true' &&
  #     (needs.apply-migrations-staging.result == 'success' || needs.apply-migrations-staging.result == 'skipped'))

  # build-knowledge-image:
  #   uses: ./.github/workflows/reusable-build-docker.yml
  #   needs: [detect-changes, apply-migrations-staging]
  #   with:
  #     image-name: aiasst-knowledge
  #     context: ./knowledge-search
  #     file: ./knowledge-search/Dockerfile
  #   if: |
  #     (always() && needs.detect-changes.outputs.knowledge-changed == 'true' &&
  #     (needs.apply-migrations-staging.result == 'success' || needs.apply-migrations-staging.result == 'skipped'))

  # deploy-assistant-image-staging:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   needs: [build-assistant-image]
  #   with:
  #     environment: staging
  #     resource-group: aiasst-staging
  #     container-app-name: aiasst-api
  #     image-name: ${{ needs.build-assistant-image.outputs.image-name-with-digest }}
  #   secrets: inherit
  #   if: always() && needs.build-assistant-image.result == 'success'

  # deploy-knowledge-image-staging:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   needs: [build-knowledge-image]
  #   with:
  #     environment: staging
  #     resource-group: aiasst-staging
  #     container-app-name: aiasst-knowledge
  #     image-name: ${{ needs.build-knowledge-image.outputs.image-name-with-digest }}
  #   secrets: inherit
  #   if: always() && needs.build-knowledge-image.result == 'success'

  # wait-for-production-approval:
  #   runs-on: ubuntu-latest
  #   environment: production-approval
  #   needs: [deploy-assistant-image-staging, deploy-knowledge-image-staging]
  #   steps:
  #     - run: |
  #         echo "Waiting for production approval..."

  # provision-infrastructure-production:
  #   needs: [detect-changes, wait-for-production-approval]
  #   uses: ./.github/workflows/reusable-deploy-infrastructure.yml
  #   with:
  #     environment: production
  #   secrets: inherit
  #   if: |
  #     (always() && needs.detect-changes.outputs.infrastructure-changed == 'true')

  # apply-migrations-production:
  #   needs: [detect-changes, provision-infrastructure-production]
  #   uses: ./.github/workflows/reusable-migrate-database.yml
  #   with:
  #     environment: production
  #   secrets: inherit
  #   if: |
  #     (always() && needs.detect-changes.outputs.migrations-changed == 'true' &&
  #     (needs.provision-infrastructure-production.result == 'success' || needs.provision-infrastructure-production.result == 'skipped'))

  # promote-assistant-image-staging:
  #   uses: ./.github/workflows/reusable-promote-docker.yml
  #   needs: [build-assistant-image, apply-migrations-production]
  #   if: |
  #     (always() &&
  #     needs.build-assistant-image.result == 'success' &&
  #     (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))
  #   with:
  #     image_name: aiasst-api
  #     image_tag: staging
  #     promote_to: production

  # promote-cleanup-job-image-staging:
  #   uses: ./.github/workflows/reusable-promote-docker.yml
  #   needs: [build-cleanup-job-image, apply-migrations-production]
  #   with:
  #     image_name: aiasst-cleanup-job
  #     image_tag: staging
  #     promote_to: production
  #   if: |
  #     (always() &&
  #     needs.build-cleanup-job-image.result == 'success' &&
  #     (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))

  # promote-knowledge-image:
  #   uses: ./.github/workflows/reusable-promote-docker.yml
  #   needs: [build-knowledge-image, apply-migrations-production]
  #   with:
  #     image_name: aiasst-knowledge
  #     image_tag: staging
  #     promote_to: production
  #   if: |
  #     (always() &&
  #     needs.build-knowledge-image.result == 'success' &&
  #     (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))

  # deploy-assistant-image-production:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   needs: [promote-assistant-image-staging]
  #   if: always() && needs.promote-assistant-image-staging.result == 'success'
  #   with:
  #     environment: production
  #     resource-group: aiasst-production
  #     container-app-name: aiasst-api
  #     image-name: ${{ needs.promote-assistant-image-staging.outputs.promoted-image }}
  #   secrets: inherit

  # deploy-knowledge-image-production:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   needs: [promote-knowledge-image]
  #   if: always() && needs.promote-knowledge-image.result == 'success'
  #   with:
  #     environment: production
  #     resource-group: aiasst-production
  #     container-app-name: aiasst-knowledge
  #     image-name: ${{ needs.promote-knowledge-image.outputs.promoted-image }}
  #   secrets: inherit
