name: Deploy Assistant

on:
  workflow_dispatch:
    inputs:
      infrastructure-changed:
        description: "Infrastructure changed"
        required: true
        type: boolean
      migrations-changed:
        description: "Migrations changed"
        required: true
        type: boolean
      assistant-changed:
        description: "Assistant changed"
        required: true
        type: boolean
      knowledge-changed:
        description: "Knowledge changed"
        required: true
        type: boolean

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      infrastructure-changed: ${{ inputs.infrastructure-changed }}
      migrations-changed: ${{ inputs.migrations-changed }}
      assistant-changed: ${{ inputs.assistant-changed }}
      knowledge-changed: ${{ inputs.knowledge-changed }}
    steps:
      - run: |
          echo "Detecting changes..."
          echo "Infrastructure changed: ${{ inputs.infrastructure-changed }}"
          echo "Migrations changed: ${{ inputs.migrations-changed }}"
          echo "Assistant changed: ${{ inputs.assistant-changed }}"
          echo "Knowledge changed: ${{ inputs.knowledge-changed }}"

  provision-infrastructure-staging:
    runs-on: ubuntu-latest
    environment: staging
    needs: detect-changes
    if: |
      (always() && needs.detect-changes.outputs.infrastructure-changed == 'true')
    steps:
      - run: |
          echo "Provisioning infrastructure..."

  apply-migrations-staging:
    runs-on: ubuntu-latest
    needs: [detect-changes, provision-infrastructure-staging]
    if: |
      (always() && needs.detect-changes.outputs.migrations-changed == 'true' &&
      (needs.provision-infrastructure-staging.result != 'success' || needs.provision-infrastructure-staging.result == 'skipped'))
    environment: staging
    steps:
      - run: |
          echo "Applying migrations..."

  build-images:
    strategy:
      matrix:
        component: [assistant, cleanup-job, knowledge]
        include:
          - component: assistant
            image-name: aiasst-api
            context: ./assistant
            file: ./assistant/Dockerfile
          - component: cleanup-job
            image-name: aiasst-cleanup-job
            context: ./assistant
            file: ./assistant/Dockerfile.ConversationCleanupJob
          - component: knowledge
            image-name: aiasst-knowledge
            context: ./knowledge-search
            file: ./knowledge-search/Dockerfile
    uses: ./.github/workflows/reusable-build-docker.yml
    with:
      image-name: ${{ matrix.image-name }}
      context: ${{ matrix.context }}
      file: ${{ matrix.file }}

  debug:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - run: |
          echo "Assistant image name: aiasst-api:${{ github.sha }}"
          echo "Cleanup job image name: aiasst-cleanup-job:${{ github.sha }}"
          echo "Knowledge image name: aiasst-knowledge:${{ github.sha }}"

  # build-assistant-image:
  #   uses: ./.github/workflows/reusable-build-docker.yml
  #   needs: [detect-changes, apply-migrations-staging]
  #   if: |
  #     (always() && needs.detect-changes.outputs.assistant-changed == 'true' &&
  #     (needs.apply-migrations-staging.result == 'success' || needs.apply-migrations-staging.result == 'skipped'))
  #   with:
  #     image-name: aiasst-api
  #     context: ./assistant
  #     file: ./assistant/Dockerfile

  # deploy-assistant-image-staging:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   if: always() && needs.build-assistant-image.result == 'success'
  #   needs: [build-assistant-image]
  #   with:
  #     environment: staging
  #     resource-group: aiasst-staging
  #     container-app-name: aiasst-api
  #     image-name: ${{ needs.build-assistant-image.outputs.image-name-with-digest }}
  #   secrets: inherit

  # build-cleanup-job-image:
  #   uses: ./.github/workflows/reusable-build-docker.yml
  #   needs: [detect-changes, apply-migrations-staging]
  #   if: |
  #     (always() && needs.detect-changes.outputs.assistant-changed == 'true' &&
  #     (needs.apply-migrations-staging.result == 'success' || needs.apply-migrations-staging.result == 'skipped'))
  #   with:
  #     image-name: aiasst-cleanup-job
  #     context: ./assistant
  #     file: ./assistant/Dockerfile.ConversationCleanupJob

  # build-knowledge-image:
  #   uses: ./.github/workflows/reusable-build-docker.yml
  #   needs: [detect-changes, apply-migrations-staging]
  #   if: |
  #     (always() && needs.detect-changes.outputs.knowledge-changed == 'true' &&
  #     (needs.apply-migrations-staging.result == 'success' || needs.apply-migrations-staging.result == 'skipped'))
  #   with:
  #     image-name: aiasst-knowledge
  #     context: ./knowledge-search
  #     file: ./knowledge-search/Dockerfile

  # deploy-knowledge-image-staging:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   if: always() && needs.build-knowledge-image.result == 'success'
  #   needs: [build-knowledge-image]
  #   with:
  #     environment: staging
  #     resource-group: aiasst-staging
  #     container-app-name: aiasst-knowledge
  #     image-name: ${{ needs.build-knowledge-image.outputs.image-name-with-digest }}
  #   secrets: inherit

  # wait-for-production-approval:
  #   runs-on: ubuntu-latest
  #   environment: production-approval
  #   needs: [deploy-assistant-image-staging, deploy-knowledge-image-staging]
  #   steps:
  #     - run: |
  #         echo "Waiting for production approval..."

  # provision-infrastructure-production:
  #   runs-on: ubuntu-latest
  #   environment: production
  #   needs: [detect-changes, wait-for-production-approval]
  #   if: |
  #     (always() && needs.detect-changes.outputs.infrastructure-changed == 'true')
  #   steps:
  #     - run: |
  #         echo "Provisioning infrastructure..."

  # apply-migrations-production:
  #   runs-on: ubuntu-latest
  #   needs: [detect-changes, provision-infrastructure-production]
  #   environment: production
  #   if: |
  #     (always() && needs.detect-changes.outputs.migrations-changed == 'true' &&
  #     (needs.provision-infrastructure-production.result == 'success' || needs.provision-infrastructure-production.result == 'skipped'))
  #   steps:
  #     - run: |
  #         echo "Applying migrations..."

  # test-production:
  #   runs-on: ubuntu-latest
  #   environment: production
  #   needs:
  #     [
  #       wait-for-production-approval,
  #       provision-infrastructure-production,
  #       apply-migrations-production,
  #     ]
  #   steps:
  #     - run: |
  #         echo "Testing assistant in production..."

  # promote-assistant-image-staging:
  #   uses: ./.github/workflows/reusable-promote-docker.yml
  #   needs:
  #     [
  #       deploy-assistant-image-staging,
  #       build-cleanup-job-image,
  #       apply-migrations-production,
  #     ]
  #   if: |
  #     (always() &&
  #     needs.deploy-assistant-image-staging.result == 'success' &&
  #     needs.build-cleanup-job-image.result == 'success' &&
  #     (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))
  #   with:
  #     image_name: aiasst-api
  #     image_tag: staging
  #     promote_to: production

  # deploy-assistant-image-production:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   needs: [promote-assistant-image-staging]
  #   if: always() && needs.promote-assistant-image-staging.result == 'success'
  #   with:
  #     environment: production
  #     resource-group: aiasst-production
  #     container-app-name: aiasst-api
  #     image-name: ${{ needs.promote-assistant-image-staging.outputs.promoted-image }}
  #   secrets: inherit

  # promote-cleanup-job-image-staging:
  #   uses: ./.github/workflows/reusable-promote-docker.yml
  #   needs:
  #     [
  #       build-cleanup-job-image,
  #       deploy-assistant-image-staging,
  #       apply-migrations-production,
  #     ]
  #   if: |
  #     (always() &&
  #     needs.build-cleanup-job-image.result == 'success' &&
  #     needs.deploy-assistant-image-staging.result == 'success' &&
  #     (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))
  #   with:
  #     image_name: aiasst-cleanup-job
  #     image_tag: staging
  #     promote_to: production

  # promote-knowledge-image:
  #   uses: ./.github/workflows/reusable-promote-docker.yml
  #   needs:
  #     [
  #       deploy-knowledge-image-staging,
  #       deploy-assistant-image-staging,
  #       apply-migrations-production,
  #     ]
  #   if: |
  #     (always() &&
  #     needs.deploy-knowledge-image-staging.result == 'success' &&
  #     needs.deploy-assistant-image-staging.result == 'success' &&
  #     (needs.apply-migrations-production.result == 'success' || needs.apply-migrations-production.result == 'skipped'))
  #   with:
  #     image_name: aiasst-knowledge
  #     image_tag: staging
  #     promote_to: production

  # deploy-knowledge-image-production:
  #   uses: ./.github/workflows/publish-container-app.yml
  #   needs: [promote-knowledge-image]
  #   if: always() && needs.promote-knowledge-image.result == 'success'
  #   with:
  #     environment: production
  #     resource-group: aiasst-production
  #     container-app-name: aiasst-knowledge
  #     image-name: ${{ needs.promote-knowledge-image.outputs.promoted-image }}
  #   secrets: inherit
