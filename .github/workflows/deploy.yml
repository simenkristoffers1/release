name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "The deployment environment (staging or production)"
        required: true
        type: string
      release_tag:
        description: "The git tag of the release, if one was created"
        required: false
        type: string
      release_version:
        description: "The version of the release"
        required: true
        type: string

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      infrastructure-changed: ${{ steps.filter.outputs.infrastructure == 'true' }}
      migrations-changed: ${{ steps.filter.outputs.migrations == 'true' }}
      assistant-changed: ${{ steps.filter.outputs.assistant == 'true' }}
      knowledge-search-changed: ${{ steps.filter.outputs.knowledge-search == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: previous-tag
        if: inputs.environment == 'production'
        run: |
          set -euo pipefail
          readonly TAG_PREFIX="assistant-v"

          CURRENT_TAG="${{ inputs.release_tag }}"
          echo "Tag: $CURRENT_TAG"
          if [[ ! "$CURRENT_TAG" =~ ^$TAG_PREFIX.* ]]; then
            echo "Tag does not match '$TAG_PREFIX*'. Skipping workflow."
            exit 1
          fi
          prev_tag=$(git tag --list "${TAG_PREFIX}*" | sort -V | grep -B 1 "$CURRENT_TAG" | head -n 1)

          if [[ "$prev_tag" == "$CURRENT_TAG" ]]; then
            prev_tag=$(git rev-list --max-parents=0 --abbrev-commit HEAD)
          fi
          echo "tag=$prev_tag" >> $GITHUB_OUTPUT

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ steps.previous-tag.outputs.tag }}
          filters: |
            infrastructure:
              - 'infrastructure/**/*.bicep'
            migrations:
              - 'assistant/src/DbUpMigrator/scripts/**/*.sql'
            assistant:
              - 'assistant/**'
            knowledge-search:
              - 'knowledge-search/**'

  provision-infrastructure:
    # Mock the provision-infrastructure job
    runs-on: ubuntu-latest
    needs: precheck
    if: |
      github.ref == 'refs/heads/main' &&
      needs.precheck.outputs.infrastructure-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: echo "Provisioning infrastructure..."

  apply-migrations:
    # Mock the apply-migrations job
    runs-on: ubuntu-latest
    needs: [precheck, provision-infrastructure]
    # If the infrastructure has changed, apply the migrations
    # If the infrastructure has not changed, apply the migrations if the migrations have changed
    if: |
      (github.ref == 'refs/heads/main' && 
      needs.provision-infrastructure.result == 'success') ||
      (always() && github.ref == 'refs/heads/main' &&
      (needs.provision-infrastructure.result == 'success' || needs.provision-infrastructure.result == 'skipped') &&
      needs.precheck.outputs.migrations-changed == 'true')
    steps:
      - uses: actions/checkout@v4
      - run: echo "Applying migrations..."

  deploy-assistant:
    runs-on: ubuntu-latest
    needs: [precheck, provision-infrastructure, apply-migrations]
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/assistant
    # If the infrastructure or migrations have changed, deploy the assistant
    # If the infrastructure or migrations have not changed, deploy the assistant if the assistant has changed
    if: |
      (github.ref == 'refs/heads/main' &&
      needs.provision-infrastructure.result == 'success' &&
      needs.apply-migrations.result == 'success') ||
      (always() && github.ref == 'refs/heads/main' &&
      (needs.provision-infrastructure.result == 'success' || needs.provision-infrastructure.result == 'skipped') &&
      (needs.apply-migrations.result == 'success' || needs.apply-migrations.result == 'skipped') &&
      needs.precheck.outputs.assistant-changed == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        if: ${{ inputs.environment == 'staging' }}
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging
            type=sha
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push staging image
        if: ${{ inputs.environment == 'staging' }}
        uses: docker/build-push-action@v6
        with:
          context: ./assistant
          file: ./assistant/Dockerfile
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Pull pre-release and tag as latest (production)
        if: ${{ inputs.environment == 'production' }}
        run: |
          docker pull ${{ env.IMAGE_NAME }}:staging
          docker tag ${{ env.IMAGE_NAME }}:staging ${{ env.IMAGE_NAME }}:${{ inputs.release_version }}
          docker push ${{ env.IMAGE_NAME }}:${{ inputs.release_version }}

      - run: echo "Deploying assistant..."

  deploy-knowledge-search:
    runs-on: ubuntu-latest
    needs: [precheck, provision-infrastructure, apply-migrations]
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/knowledge-search
    # If the infrastructure or migrations have changed, deploy the knowledge search
    # If the infrastructure or migrations have not changed, deploy the knowledge search if the knowledge search has changed
    if: |
      (github.ref == 'refs/heads/main' &&
      needs.provision-infrastructure.result == 'success' &&
      needs.apply-migrations.result == 'success') ||
      (always() && github.ref == 'refs/heads/main' &&
      (needs.provision-infrastructure.result == 'success' || needs.provision-infrastructure.result == 'skipped') &&
      (needs.apply-migrations.result == 'success' || needs.apply-migrations.result == 'skipped') &&
      needs.precheck.outputs.knowledge-search-changed == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        if: ${{ inputs.environment == 'staging' }}
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging
            type=sha
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push staging image
        if: ${{ inputs.environment == 'staging' }}
        uses: docker/build-push-action@v6
        with:
          context: ./knowledge-search
          file: ./knowledge-search/Dockerfile
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Pull pre-release and tag as latest (production)
        if: ${{ inputs.environment == 'production' }}
        run: |
          docker pull ${{ env.IMAGE_NAME }}:staging
          docker tag ${{ env.IMAGE_NAME }}:staging ${{ env.IMAGE_NAME }}:${{ inputs.release_version }}
          docker push ${{ env.IMAGE_NAME }}:${{ inputs.release_version }}
      - uses: actions/checkout@v4
      - run: echo "Deploying knowledge-search..."
