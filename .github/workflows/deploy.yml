name: Deploy

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ github.event_name == 'release' && 'production' || 'staging' }}
      infrastructure-changed: ${{ steps.check-changes.outputs.infrastructure-changed }}
      migrations-changed: ${{ steps.check-changes.outputs.migrations-changed }}
      assistant-changed: ${{ steps.check-changes.outputs.assistant-changed }}
      knowledge-search-changed: ${{ steps.check-changes.outputs.knowledge-search-changed }}
      chat-ui-changed: ${{ steps.check-changes.outputs.chat-ui-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check release tag
        if: github.event_name == 'release'
        run: |
          set -euo pipefail
          readonly TAG_PREFIX="assistant-v"

          CURRENT_TAG="${{ github.event.release.tag_name }}"
          echo "Tag: $CURRENT_TAG"
          if [[ ! "$CURRENT_TAG" =~ ^$TAG_PREFIX.* ]]; then
            echo "Tag does not match '$TAG_PREFIX*'. Skipping workflow."
            exit 1
          fi

          if [[ -z "$CURRENT_TAG" ]]; then
            echo "❌ Error: CURRENT_TAG is not set."
            exit 1
          fi

          echo "🔎 Analyzing changes for current tag: $CURRENT_TAG"

          prev_tag=$(git tag --list "${TAG_PREFIX}*" | sort -V | grep -B 1 "$CURRENT_TAG" | head -n 1)

          if [[ "$prev_tag" == "$CURRENT_TAG" ]]; then
            prev_tag=""
          fi

          readonly CURRENT_REF="$CURRENT_TAG"
          declare PREV_REF

          if [[ -z "$prev_tag" ]]; then
            echo "⚠️ No previous tag found. Comparing against the initial commit." >&2
            PREV_REF=$(git rev-list --max-parents=0 --abbrev-commit HEAD)
          else
            PREV_REF="$prev_tag"
            echo "✅ Found previous tag: $PREV_REF"
          fi

          echo "PREV_REF=${PREV_REF}" >> "$GITHUB_ENV"
          echo "CURRENT_REF=${CURRENT_REF}" >> "$GITHUB_ENV"

      - name: Check for push event
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "PREV_REF=HEAD~1" >> "$GITHUB_ENV"
          echo "CURRENT_REF=HEAD" >> "$GITHUB_ENV"

      - id: check-changes
        run: |
          echo "↔️  Comparing commit range: $PREV_REF..$CURRENT_REF"
          echo

          echo "--- Detected Changes ---"
          git diff --name-only "$PREV_REF..$CURRENT_REF" | awk '
            BEGIN {
              infra=0; mig=0; asst=0; know=0; docs=0;
            }
            /infrastructure\/.*\.bicep$/                 { infra = 1 }
            /assistant\/src\/DbUpMigrator\/scripts\/.*\.sql$/ { mig = 1 }
            /assistant\/.*\.cs$/                         { asst = 1 }
            /knowledge-search\/.*\.py$/                  { know = 1 }
            /docs\/.*\.md$/                             { docs = 1 }
            END {
              print "infrastructure-changed=" (infra ? "true" : "false")
              print "migrations-changed=" (mig ? "true" : "false")
              print "assistant-changed=" (asst ? "true" : "false")
              print "knowledge-search-changed=" (know ? "true" : "false")
              print "docs-changed=" (docs ? "true" : "false")
            }
          '  | while IFS= read -r line; do
            echo "$line" >> "$GITHUB_OUTPUT"
          done

  provision-infrastructure:
    # Mock the provision-infrastructure job
    runs-on: ubuntu-latest
    needs: precheck
    if: |
      github.ref == 'refs/heads/main' &&
      needs.precheck.outputs.infrastructure-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: echo "Provisioning infrastructure..."

  apply-migrations:
    # Mock the apply-migrations job
    runs-on: ubuntu-latest
    needs: [precheck, provision-infrastructure]
    # If the infrastructure has changed, apply the migrations
    # If the infrastructure has not changed, apply the migrations if the migrations have changed
    if: |
      (github.ref == 'refs/heads/main' && 
      needs.provision-infrastructure.result == 'success') ||
      (always() && github.ref == 'refs/heads/main' &&
      (needs.provision-infrastructure.result == 'success' || needs.provision-infrastructure.result == 'skipped') &&
      needs.precheck.outputs.migrations-changed == 'true')
    steps:
      - uses: actions/checkout@v4
      - run: echo "Applying migrations..."

  deploy-assistant:
    runs-on: ubuntu-latest
    needs: [precheck, provision-infrastructure, apply-migrations]
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/assistant
    # If the infrastructure or migrations have changed, deploy the assistant
    # If the infrastructure or migrations have not changed, deploy the assistant if the assistant has changed
    if: |
      (github.ref == 'refs/heads/main' &&
      needs.provision-infrastructure.result == 'success' &&
      needs.apply-migrations.result == 'success') ||
      (always() && github.ref == 'refs/heads/main' &&
      (needs.provision-infrastructure.result == 'success' || needs.provision-infrastructure.result == 'skipped') &&
      (needs.apply-migrations.result == 'success' || needs.apply-migrations.result == 'skipped') &&
      needs.precheck.outputs.assistant-changed == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        if: ${{ needs.precheck.outputs.environment == 'staging' }}
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=match,pattern=v(.*),group=1
            type=raw,value=staging
            type=sha
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push staging image
        if: ${{ needs.precheck.outputs.environment == 'staging' }}
        uses: docker/build-push-action@v6
        with:
          context: ./assistant
          file: ./assistant/Dockerfile
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Pull pre-release and tag as latest (production)
        if: ${{ needs.precheck.outputs.environment == 'production' }}
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/assistant:staging
          docker tag ghcr.io/${{ github.repository_owner }}/assistant:staging ghcr.io/${{ github.repository_owner }}/assistant:production
          docker push ghcr.io/${{ github.repository_owner }}/assistant:production

      - run: echo "Deploying assistant..."

  deploy-knowledge-search:
    runs-on: ubuntu-latest
    needs: [precheck, provision-infrastructure, apply-migrations]
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/knowledge-search
    # If the infrastructure or migrations have changed, deploy the knowledge search
    # If the infrastructure or migrations have not changed, deploy the knowledge search if the knowledge search has changed
    if: |
      (github.ref == 'refs/heads/main' &&
      needs.provision-infrastructure.result == 'success' &&
      needs.apply-migrations.result == 'success') ||
      (always() && github.ref == 'refs/heads/main' &&
      (needs.provision-infrastructure.result == 'success' || needs.provision-infrastructure.result == 'skipped') &&
      (needs.apply-migrations.result == 'success' || needs.apply-migrations.result == 'skipped') &&
      needs.precheck.outputs.knowledge-search-changed == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        if: ${{ needs.precheck.outputs.environment == 'staging' }}
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=staging
            type=sha
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push staging image
        if: ${{ needs.precheck.outputs.environment == 'staging' }}
        uses: docker/build-push-action@v6
        with:
          context: ./knowledge-search
          file: ./knowledge-search/Dockerfile
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Pull pre-release and tag as latest (production)
        if: ${{ needs.precheck.outputs.environment == 'production' }}
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/knowledge-search:staging
          docker tag ghcr.io/${{ github.repository_owner }}/knowledge-search:staging ghcr.io/${{ github.repository_owner }}/knowledge-search:production
          docker push ghcr.io/${{ github.repository_owner }}/knowledge-search:production
      - uses: actions/checkout@v4
      - run: echo "Deploying knowledge-search..."
